/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package newvideoplayer;

import hvideoplayer.PlaySound;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Graphics;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;
import javax.swing.Timer;

/**
 *
 * @author Aishwarya
 */


public class playerForm extends javax.swing.JFrame {

	public ArrayList<MetaFile> metaSet = new ArrayList<MetaFile>();
        public ArrayList<Video> videoQueue = new ArrayList<Video>();
        public PlaySound ps;
	MetaFile m = new MetaFile();
        int videoCount=-1;
        static String startFileName;
        static String startMetaFile;
	Thread[] linkVideos = new Thread[10];
	int RED_Count;
	File primaryVideo = null;
	int videoNumber = 0;
	InputStream is;
	JLabel[] labelArray;
	int width = 352;
	int height = 288;
	BufferedImage[] imageArray;
	BufferedImage img;
	
        float topLeftXInc = 0, topRightXInc = 0, botLeftXInc = 0, botRightXInc = 0,
			topLeftYInc = 0, topRightYInc = 0, botLeftYInc = 0,
			botRightYInc = 0;
        int currentFrame;
	int LabelIndex;
        int sF;
	int counter1 = 0;
	int DELAY = 1000 / 24;
	Timer fps;
	
    /**
     * Creates new form playerForm
     */
    public playerForm(String fileName, String metaFile) throws Exception {
        
        initComponents();
        readMyMeta(metaFile.split(".meta")[0]);
        VideoProcessing(fileName, currentFrame,true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        DisplayLabel = new javax.swing.JLabel();
        Pause = new javax.swing.JButton();
        Play = new javax.swing.JButton();
        Next = new javax.swing.JButton();
        Previous = new javax.swing.JButton();
        Stop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(300, 350));

        jPanel1.setMaximumSize(new java.awt.Dimension(350, 288));
        jPanel1.setMinimumSize(new java.awt.Dimension(350, 288));
        jPanel1.setPreferredSize(new java.awt.Dimension(350, 288));

        DisplayLabel.setAlignmentY(0.0F);
        DisplayLabel.setMaximumSize(new java.awt.Dimension(350, 288));
        DisplayLabel.setMinimumSize(new java.awt.Dimension(350, 288));
        DisplayLabel.setPreferredSize(new java.awt.Dimension(350, 288));
        DisplayLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mouseClickHandler(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(DisplayLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(DisplayLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        Pause.setText("Pause");
        Pause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PauseActionPerformed(evt);
            }
        });

        Play.setText("Play");
        Play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayActionPerformed(evt);
            }
        });

        Next.setText("Next");
        Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    NextActionPerformed(evt);
                } catch (Exception ex) {
                    Logger.getLogger(playerForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        Previous.setText("Previous");
        Previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    PreviousActionPerformed(evt);
                } catch (Exception ex) {
                    Logger.getLogger(playerForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        Stop.setText("Stop");
        Stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Play)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Pause)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Stop)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Previous)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Next)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Stop)
                    .addComponent(Previous)
                    .addComponent(Next)
                    .addComponent(Pause)
                    .addComponent(Play))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        Previous.setEnabled(false);
        Next.setEnabled(false);        
    }// </editor-fold>//GEN-END:initComponents

    private void StopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopActionPerformed
        // TODO add your handling code here:
        counter1 = 0;
                RED_Count =0;
		DisplayLabel.setIcon(new ImageIcon());
		fps.stop();
                ps.audioCounter=720;
        
    }//GEN-LAST:event_StopActionPerformed

    private void PlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayActionPerformed
        // TODO add your handling code here:
        fps.start();
        ps.audioTimer.start();
    }//GEN-LAST:event_PlayActionPerformed

    private void PauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PauseActionPerformed
        // TODO add your handling code here:
        fps.stop();
        ps.audioTimer.stop();
    }//GEN-LAST:event_PauseActionPerformed

    private void mouseClickHandler(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseClickHandler
        // TODO add your handling code here:
        
        onClick(evt.getX(),evt.getY());
    }//GEN-LAST:event_mouseClickHandler

    private void PreviousActionPerformed(java.awt.event.ActionEvent evt) throws Exception {//GEN-FIRST:event_PreviousActionPerformed
        // TODO add your handling code here:
        videoCount--;
        Next.setEnabled(true);
        if(videoCount==0){
            Previous.setEnabled(false);
        }
                  
        if(videoQueue.size()>1 && videoCount>=0 ){
            String prevFile=videoQueue.get(videoCount).videoName;
            int prevStartFrameNo=videoQueue.get(videoCount).startFrame;
            readMyMeta(prevFile.split(".rgb")[0]);
            VideoProcessing(prevFile, prevStartFrameNo,false);
        }
        
    }//GEN-LAST:event_PreviousActionPerformed

    private void NextActionPerformed(java.awt.event.ActionEvent evt) throws Exception {//GEN-FIRST:event_NextActionPerformed
        // TODO add your handling code here:
        videoCount++;
        Previous.setEnabled(true);
        if(videoCount+1==videoQueue.size())
            Next.setEnabled(false);
        else
            Next.setEnabled(true);
        
        if(videoQueue.size()>videoCount){
            
            String prevFile=videoQueue.get(videoCount).videoName;
            int prevStartFrameNo=videoQueue.get(videoCount).startFrame;
            readMyMeta(prevFile.split(".rgb")[0]);
            VideoProcessing(prevFile, prevStartFrameNo,false);
        }
         

    }//GEN-LAST:event_NextActionPerformed

    
        public void onClick(int clickedX, int clickedY)
    {
        int size = metaSet.size();
        int i = 0;
         
        int prevKeyFrame = -1;
        int nextKeyFrame = -1;
        int topLeftX = 0;
        int topLeftY = 0;
        int bottomRightX = 0;
        int bottomRightY = 0;
        String secVideoName;
        int secVideoStartFrameNo = 0;
        int foundFlag = 0;
        
        //System.out.println("clicked x="+clickedX+" clicked Y="+clickedY+" current Frame="+currentFrame);
        //Check for all (HyperLinks)
	
        while(i < size && foundFlag == 0)
        {
            //for all keyFrames in a metaSet(HyperLink)
            for(int j = 0; j < metaSet.get(i).kf.size(); j++)
            {
                
                //Find the two keyFrames between which the given(currentFrameNo) lies
                if(j!=metaSet.get(i).kf.size()-1)
                {    
                if(currentFrame > metaSet.get(i).kf.get(j).frameNum && currentFrame<=metaSet.get(i).kf.get(j+1).frameNum)
                {
                
                    //If the found keyFrame is the last keyFrame for this metaSet(hyperlink)
                    if(j == (metaSet.get(i).kf.size() - 1))
                    {
                        //this particular metaSet(hyperlink/rectangle) does not exist on "currentFrameNo"
                        //break from for loop
                        break;
                    }
                    //Check for the X and Y co-ordinates
                    else
                    {
                                          
                        int frameDiff = metaSet.get(i).kf.get(j+1).frameNum-metaSet.get(i).kf.get(j).frameNum;
                        topLeftXInc = (metaSet.get(i).kf.get(j+1).topLeftX - metaSet
					.get(i).kf.get(j).topLeftX)
					/ (frameDiff);
			topLeftYInc = (metaSet.get(i).kf.get(j+1).topLeftY - metaSet
					.get(i).kf.get(j).topLeftY)
					/ (frameDiff);

			botRightXInc = (metaSet.get(i).kf.get(j+1).bottomRightX - metaSet
					.get(i).kf.get(j).bottomRightX)
					/ (frameDiff);
                        
			botRightYInc = (metaSet.get(i).kf.get(j+1).bottomRightY - metaSet
					.get(i).kf.get(j).bottomRightY)
					/ (frameDiff);
                        
                        topLeftX = (int)((currentFrame - metaSet.get(i).kf.get(j).frameNum) * topLeftXInc)
				+ metaSet.get(i).kf.get(j).topLeftX;
                        topLeftY = (int)((currentFrame - metaSet.get(i).kf.get(j).frameNum) * topLeftYInc)
				+ metaSet.get(i).kf.get(j).topLeftY;
                        bottomRightX = (int)((currentFrame - metaSet.get(i).kf.get(j).frameNum) * botRightXInc)
				+ metaSet.get(i).kf.get(j).bottomRightX;
                        bottomRightY = (int)((currentFrame - metaSet.get(i).kf.get(j).frameNum) * botRightYInc)
				+ metaSet.get(i).kf.get(j).bottomRightY;

                
                        //Check if "clickedX" and "clickedY" lies within the rectangle on this interpolated frame
                        //System.out.println(clickedX+" "+clickedY+" "+topLeftX+" "+topLeftY+" "+bottomRightX+" "+bottomRightY);
                        if(clickedX >= topLeftX && clickedX <= bottomRightX && clickedY >= topLeftY && clickedY <= bottomRightY)
                        {
                            secVideoName = metaSet.get(i).linkedVideoName;
                            String vdo = secVideoName.split(".rgb")[0];
                            secVideoStartFrameNo = metaSet.get(i).linkedVideoStartFrame;
                           // System.out.println("secVideoName="+secVideoName+"  secVideoStartFrameNo="+secVideoStartFrameNo);
                            try {
                                //Start the secondary video
                                readMyMeta(vdo);
                            } catch (Exception ex) {
                                Logger.getLogger(playerForm.class.getName()).log(Level.SEVERE, null, ex);
                            }
                    Previous.setEnabled(true);

                            VideoProcessing(secVideoName, secVideoStartFrameNo,true);
		            break;
                        }
                        else
                        {
                            //Not Found
                            //Proceed with the next metaSet(hyperlink)
                            //break from for loop
                            break;
                        }
                    }
                }
                }
                else
                    break;
            }//End for
            i++;
        }
    }

    public void VideoProcessing(String readPath,int startFrame,Boolean addToQueue) {

        try {
            
                    
                    if(fps!=null)
                    {
                        fps.stop();
                    }
			primaryVideo = new File(readPath);
			is = new FileInputStream(primaryVideo);
                        sF=startFrame;
                        if(addToQueue)
                        {
                            Video videoObj=new Video(); 
                            videoObj.videoName=readPath;
                            videoObj.startFrame=startFrame;
                            videoQueue.add(videoObj);
                            videoCount++;
                         }
                        is.skip((long)(3*height*width*startFrame));
		} catch (FileNotFoundException e) {
			System.out.println("File not found!!");
		}
                catch(IOException e){
                    System.out.println("IO Exception!!");
                }
                
		final long len = primaryVideo.length();
		//System.out.println("file.len :" + len);
		
		int numRead = 0;

		labelArray = new JLabel[(int) (primaryVideo.length() / (3 * height * width))];// equals
																						// total
																						// number
																						// of
																						// frames
		RED_Count = labelArray.length-sF;// RED_COUNT keeps track of frame being
										// displayed
		imageArray = new BufferedImage[(int) (primaryVideo.length() / (3 * height * width))];
		// SourceSlider.setMaximum(labelArray.length);
		LabelIndex = labelArray.length;
		try {
            //System.out.println("labelArray.length : " + labelArray.length);

            ActionListener actionPerformed;
           // System.out.println("metaData.size() = " + metaSet.size());
            actionPerformed = new ActionListener() {
                    int numRead = 0;
                    
                    byte[] bytes = new byte[(int) len];

                    // @Override
                    public void actionPerformed(ActionEvent e) {
                            if (RED_Count > 0) {
                                    currentFrame = 720 - RED_Count;
                                    try {
                                            if ((numRead = is
                                                            .read(bytes, 0, 3 * height * width)) >= 0) {
                                                                                       int ind = 0;
                                                    img = new BufferedImage(width, height,
                                                                    BufferedImage.TYPE_INT_RGB);
                                                    for (int y = 0; y < height; y++) {
                                                            for (int x = 0; x < width; x++) {
                                                                    byte a = 0;
                                                                    byte r = bytes[ind];
                                                                    byte g = bytes[ind + height * width];
                                                                    byte b = bytes[ind + height * width * 2];
                                                                    int pix = 0xff000000
                                                                                    | ((r & 0xff) << 16)
                                                                                    | ((g & 0xff) << 8)
                                                                                    | (b & 0xff);
                                                                    img.setRGB(x, y, pix);
                                                                    ind++;
                                                            }
                                                    }

                                                    for (int p = 0; p < metaSet.size(); p++) {

                                                            // System.out.println("DEBUG !!!!");
                                                            int nextKf=metaSet.get(p).nextKf;
                                                            int prevKf=metaSet.get(p).prevKf;
                                                            calcIncrement(metaSet.get(p).kf.get(nextKf).frameNum,p);
                                                            if (metaSet.get(p).kf.get(prevKf).frameNum <= currentFrame
                                                                            && currentFrame <= metaSet.get(p).kf
                                                                                            .get(nextKf).frameNum) {
                                                           
                                                                    
                                                                    interpolateArea(currentFrame, p);
                                                            } else {
                                                                    DisplayLabel.setCursor(Cursor
                                                                                    .getDefaultCursor());
                                                            }
                                                            
                                                            
                                                            
                                                    }
                                                    //Change the next and current keyframe index
                                                    for(int p=0;p<metaSet.size();p++)
                                                    {
                                                        int nextKf=metaSet.get(p).nextKf;
                                                        if(currentFrame==metaSet.get(p).kf.get(nextKf).frameNum)
                                                        {
                                                            
                                                            if(metaSet.get(p).nextKf<metaSet.get(p).numOfKeyFrames-1)
                                                            {
                                                                metaSet.get(p).nextKf++;
                                                                //System.out.println("``````````````````````next key frames next="+metaSet.get(p).nextKf+"no of kf="+metaSet.get(p).numOfKeyFrames);
                                                            }
                                                            metaSet.get(p).prevKf++;
                                                        }
                                                    }

                                                    DisplayLabel.setIcon(new ImageIcon(img));
                                                    RED_Count--;
                                            }
                                    } catch (IOException ex) {
                                            Logger.getLogger(playerForm.class.getName()).log(
                                                            Level.SEVERE, null, ex);
                                    }
                            } else {
                                    // all frames displayed,now loop the video
                                    for(int p=0;p<metaSet.size();p++)
                                    {
                                        metaSet.get(p).prevKf=0;
                                        metaSet.get(p).nextKf=1;
                                    }RED_Count = labelArray.length-sF;
                                    try {
                                            is = new FileInputStream(primaryVideo);
                                    try {
                                        is.skip((long)(3*height*width*sF));
                                    } catch (IOException ex) {
                                        Logger.getLogger(playerForm.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                    } catch (FileNotFoundException ex) {
                                            Logger.getLogger(playerForm.class.getName()).log(
                                                            Level.SEVERE, null, ex);
                                    }
                                   // System.out.println("Reached the end " + RED_Count);
                            }
                    }
            };
            ps=new PlaySound(readPath, startFrame);
                fps = new Timer(DELAY, actionPerformed);
			fps.start();
                ps.start();
		} catch (Exception e) {
		}
	}

	public void interpolateArea(int FrameNumber, int p) {

		int currTopLeftX = 0;
		int currTopLeftY = 0;
		int currBotRightX = 0;
		int currBotRightY = 0;
                int nextKf=metaSet.get(p).nextKf;
                int prevKf=metaSet.get(p).prevKf;

		currTopLeftX = (int)((FrameNumber - metaSet.get(p).kf.get(prevKf).frameNum) * topLeftXInc)
				+ metaSet.get(p).kf.get(prevKf).topLeftX;
		currTopLeftY = (int)((FrameNumber - metaSet.get(p).kf.get(prevKf).frameNum) * topLeftYInc)
				+ metaSet.get(p).kf.get(prevKf).topLeftY;
		currBotRightX = (int)((FrameNumber - metaSet.get(p).kf.get(prevKf).frameNum) * botRightXInc)
				+ metaSet.get(p).kf.get(prevKf).bottomRightX;
		currBotRightY = (int)((FrameNumber - metaSet.get(p).kf.get(prevKf).frameNum) * botRightYInc)
				+ metaSet.get(p).kf.get(prevKf).bottomRightY;

                                
                Graphics g=getGraphics();
                g.setColor(Color.red);
                
                g.drawRect(currTopLeftX, currTopLeftY,Math.abs(currBotRightX-currTopLeftX) ,Math.abs(currBotRightY-currTopLeftY));

		
		Point mousePoint = MouseInfo.getPointerInfo().getLocation();
                SwingUtilities.convertPointFromScreen(mousePoint,DisplayLabel);
		if (currTopLeftX <= (int)(mousePoint.getX())
				&& (int)(mousePoint.getX())<= currBotRightX) {
			if (currTopLeftY <=(int)(mousePoint.getY())
					&& (int)(mousePoint.getY())<= currBotRightY)
                        {
                            DisplayLabel.setCursor(Cursor
						.getPredefinedCursor(Cursor.HAND_CURSOR));
                            
                        }
		} else
			DisplayLabel.setCursor(Cursor.getDefaultCursor());
	}

public void calcIncrement(int endFrame, int p) {

                float frameDiff=endFrame - metaSet.get(p).kf.get(metaSet.get(p).prevKf).frameNum;
		if ((frameDiff) != 0) {
                    
			topLeftXInc = (metaSet.get(p).kf.get(metaSet.get(p).nextKf).topLeftX - metaSet
					.get(p).kf.get(metaSet.get(p).prevKf).topLeftX)
					/ (frameDiff);
			topLeftYInc = (metaSet.get(p).kf.get(metaSet.get(p).nextKf).topLeftY - metaSet
					.get(p).kf.get(metaSet.get(p).prevKf).topLeftY)
					/ (frameDiff);

			botRightXInc = (metaSet.get(p).kf.get(metaSet.get(p).nextKf).bottomRightX - metaSet
					.get(p).kf.get(metaSet.get(p).prevKf).bottomRightX)
					/ (frameDiff);

			botRightYInc = (metaSet.get(p).kf.get(metaSet.get(p).nextKf).bottomRightY - metaSet
					.get(p).kf.get(metaSet.get(p).prevKf).bottomRightY)
					/ (frameDiff);
		}
	}

    public void readMyMeta(String path) throws Exception {
                /*
		if(videoCount==videoQueue.size() || videoCount==-1)
                    Next.setEnabled(false);
                else
                    Next.setEnabled(true);
*/
                
                BufferedReader bufferedReader = null;
                int count=metaSet.size();
                for(int i=0;i<metaSet.size();i++)
                {
                    metaSet.remove(0);
                }
                try{
                bufferedReader= new BufferedReader(new FileReader(
				path+".meta"));
                        String sCurrentLine;
                        sCurrentLine = bufferedReader.readLine();
                        String result[];

                        while (sCurrentLine != null) {
                                m = new MetaFile();
                                result = sCurrentLine.split(" ");

                                if (result.length == 3) {
                                        m.rectID = Integer.parseInt(result[0]);
                                        m.rectName = result[1];
                                        m.numOfKeyFrames = Integer.parseInt(result[2]);
                                        //System.out.println("m.numOfKeyFrames" + m.numOfKeyFrames);
                                        sCurrentLine = bufferedReader.readLine();
                                        result = sCurrentLine.split(" ");
                                }
                                if (result.length == 2) {

                                        m.linkedVideoName = result[0];
                                        m.linkedVideoStartFrame = Integer.parseInt(result[1]);
                                        sCurrentLine = bufferedReader.readLine();
                                        result = sCurrentLine.split(" ");
                                }
                                if (result.length == 5) {

                                        for (int i = 0; i < m.numOfKeyFrames; i++) {

                                                KeyFrame k = new KeyFrame();
                                                k.frameNum = Integer.parseInt(result[0]);
                                                k.topLeftX = Integer.parseInt(result[1]);
                                                k.topLeftY = Integer.parseInt(result[2]);
                                                k.bottomRightX = Integer.parseInt(result[3]);
                                                k.bottomRightY = Integer.parseInt(result[4]);

                                                m.kf.add(k);

                                                if (i == (m.numOfKeyFrames) - 1)
                                                        break;
                                                sCurrentLine = bufferedReader.readLine();
                                                result = sCurrentLine.split(" ");

                                        }
                                        sCurrentLine = bufferedReader.readLine();

                                }

                                metaSet.add(m);
                        }
                }
                catch(FileNotFoundException e){
                    
                }
                

		// display the newly populated metaFile
/*
		int num = 0;
		while (num < metaSet.size()) {
			metaSet.get(num++).display();
		}*/

	}
	
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(playerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(playerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(playerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(playerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        final String startFileName=args[0];
final String startMetaFile=args[1];

System.out.println("startFileName : "+startFileName+"  startMetaFile : "+startMetaFile);
/* Create and display the form */
java.awt.EventQueue.invokeLater(new Runnable() {
public void run() {
try {
// new playerForm().setVisible(true);

new playerForm(startFileName, startMetaFile).show();
} catch (Exception ex) {
Logger.getLogger(playerForm.class.getName()).log(Level.SEVERE, null, ex);
}
}
});

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel DisplayLabel;
    private javax.swing.JButton Next;
    private javax.swing.JButton Pause;
    private javax.swing.JButton Play;
    private javax.swing.JButton Previous;
    private javax.swing.JButton Stop;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
